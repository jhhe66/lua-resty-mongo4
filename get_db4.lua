---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/7/2 15:10
---
local mongol = require("resty.mongol")
local conf = require("myconfig") -- 配置项，正式环境

local DB_POOL = {
    _VERSION = "0.1.0"
}

function DB_POOL.get_db_mongo_cli(host, port, timeout)
    local host = host or conf.myconf_mongo_ip
    local port = port or conf.myconf_mongo_port
    local timeout = timeout or conf.myconf_mongo_timeout
    if ngx.ctx.db_mongo_cli then
        return ngx.ctx.db_mongo_cli
    end

    local conn = mongol:new()
    if not conn then
        return nil, '### get_db_mongo_cli() MongoDB initialize failed. ###'
    end

    conn:set_timeout(timeout)

    -- config the ngx.socket.tcp/cosocket built-in connection pool
    -- https://github.com/openresty/lua-nginx-module#ngxsockettcp
    local pool = conf.myconf_ums_username ..":"..conf.myconf_ums_database..":"..conf.myconf_mongo4ums_ip..":"..conf.myconf_mongo4ums_port
    local pool_size = conf.myconf_mongo_poolsize
    local backlog = 0
    local pool_opts = {
        pool = pool,
        pool_size = pool_size,
        -- backlog = backlog
    }
    local ok, err = conn:connect(host, port, pool_opts)
    if not ok then
        return nil, err
    end
    local times, err = conn:get_reused_times()
    if 0 == times or nil == times then
        db = conn:new_db_handle("admin")
        if nil == db then
            ngx.log(ngx.ERR, "get_db_mongo_cli() MongoDB new_db_handle failed 01.\n")
            _M.close_db_mongo_cli()
            return nil, '### get_db_mongo_col() MongoDB new_db_handle failed 01. ###'
        end

        --用户授权
        local ok, err = db:auth_scram_sha1(conf.myconf_ums_username, conf.myconf_ums_passwd)
        if ok ~= 1 then
            ngx.log(ngx.ERR, "get_db_mongo_cli() MongoDB user auth failed, err=", err, ".\n")
            _M.close_db_mongo_cli()
            return nil, '### get_db_mongo_col() MongoDB auth_scram_sha1 failed: '..err.." ###"
        else
            ngx.log(ngx.ERR, "get_db_mongo_cli() user auth success, ok=", ok, "\n")
        end
    else
        ngx.log(ngx.ERR, '$$$ get_db_mongo_col() reused: ', times)
    end

    ngx.ctx.db_mongo_cli = conn
    return ngx.ctx.db_mongo_cli, nil
end

function DB_POOL.get_db_mongo_col(colname)
    local conn, err = DB_POOL.get_db_mongo_cli()
    if not conn or err then
        return nil, '### get_db_mongo_col() MongoDB connect failed: '..err..' ###';
    end

    -- 切换数据库
    local db = conn:new_db_handle(conf.myconf_ums_database)
    if nil == db then
        ngx.log(ngx.ERR, "get_db_mongo_col() swith to ", conf.myconf_das_database, " failed.\n")
        _M.close_db_mongo_cli()
        return nil, '### get_db_mongo_col() MongoDB new_db_handle failed 01. ###'
    end

    local colname = colname

    return db:get_col(colname), nil
end

function DB_POOL.close_db_mongo_cli(keepalive_time)
    local keepalive_time = keepalive_time
    local pool_size = conf.myconf_mongo_poolsize
    if ngx.ctx.db_mongo_cli then
        ngx.log(ngx.ERR, "close_db_mongo_cli() set_keepalive keepalive_time=", keepalive_time, ".\n")
        -- no need to manually call the close method on it afterwards.
        ngx.ctx.db_mongo_cli:set_keepalive(keepalive_time, pool_size)
        ngx.ctx.db_mongo_cli = nil
    end
end

return DB_POOL